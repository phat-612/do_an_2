<div id="chatboxContainer" class=" p-4 position-fixed end-0" style="z-index: 1050; bottom: 50px; cursor: pointer;">
  <div id="chatboxToggle" class="card shadow rounded-circle" style="display: none;">
    <div class="card-header d-flex justify-content-center align-items-center"
      style="background-color: #007bff; color: white; border-radius: 50%; width: 45px; height: 45px;">
      <i class="bi bi-chat-dots"></i>
    </div>
  </div>
  <!-- Chatbox thực tế, ẩn khi chưa mở -->
  <div id="chatbox" class="card" style="width: 300px; height: 500px; display: none; margin-top: 10px;">
    <!-- Thanh Header -->
    <div class="card-header d-flex justify-content-between align-items-center"
      style="background-color: #007bff; color: white; border-radius: 8px 8px 0 0;">
      <span>Chăm sóc khách hàng</span>
      <button id="closeChat" class="btn-close" aria-label="Close"></button>
    </div>
    <!-- Nội dung chat -->
    <div id="chatboxBody" class="card-body p-3"
      style="overflow-y: auto; background-color: #f8f9fa; border-radius: 8px; height: 380px;">
      <!-- Tin nhắn mặc định -->
      <div class="mb-2 d-flex justify-content-start" id="defaultMessage">
        <div class="d-flex align-items-center">
          <div class="p-2 rounded bg-light">
            Tôi có thể giúp gì cho bạn?
          </div>
        </div>
      </div>
    </div>
    <!-- Thanh Footer (nơi nhập tin nhắn) -->
    <div class="card-footer d-flex align-items-center bg-white p-2 rounded"
      style="border-top: 1px solid #ddd;">
      <input type="text" class="form-control rounded-3" placeholder="Type a message..." id="chatInput"
        style="border: 1px solid #ccc; box-shadow: none; font-size: 14px;" />
      <button class="btn btn-primary ms-2" id="sendMessage">Gửi</button>
    </div>
  </div>
</div>
<!-- Chatbox -->
<div id="chatboxnotlogin" class="p-4 position-fixed end-0" style="z-index: 1050; bottom: 50px; display: none; cursor: pointer;">
  <!-- Nút mở chatbox -->
  <div id="chatboxToggle" class="card shadow rounded-circle">
    <div class="card-header d-flex justify-content-center align-items-center"
      style="background-color: #007bff; color: white; border-radius: 50%; width: 45px; height: 45px;">
      <i class="bi bi-chat-dots"></i>
    </div>
  </div>
</div>

<!-- Modal đăng nhập -->
<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="loginModalLabel">Đăng nhập</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Bạn cần đăng nhập sử dụng được chức năng </p>
        <button class="btn btn-primary w-100" id="goToLogin">Đăng nhập</button>
      </div>
    </div>
  </div>
</div>
<script>
  var room = "{{session.idUser}}"; 
  if (!room) {
  // Hiển thị chatboxnotlogin
  const chatboxNotLogin = document.getElementById("chatboxnotlogin");
  chatboxNotLogin.style.display = "block";

  // Xử lý sự kiện click vào nút mở chatbox
  const chatboxToggle = chatboxNotLogin.querySelector("#chatboxToggle");
  chatboxToggle.addEventListener("click", function () {
    // Hiển thị modal yêu cầu đăng nhập
    const loginModal = new bootstrap.Modal(document.getElementById("loginModal"));
    loginModal.show();
  });

  // Xử lý nút "Đăng nhập" trong modal
  document.getElementById("goToLogin").addEventListener("click", function () {
    window.location.href = "/login"; // Chuyển hướng đến trang đăng nhập
  });
} else {
  // Xử lý nếu đã đăng nhập
  const chatboxContainer = document.getElementById("chatboxContainer");
  chatboxContainer.querySelector("#chatboxToggle").style.display = "block";

  // Thêm sự kiện mở chatbox
  chatboxContainer.querySelector("#chatboxToggle").addEventListener("click", function () {
    const chatbox = document.getElementById("chatbox");
    chatbox.style.display = "none";  // Đóng chatbox
    document.getElementById("chatboxToggle").style.display = "block"; 

    // Cuộn nội dung xuống cuối
    setTimeout(() => {
      document.getElementById("chatboxBody").scrollTop = document.getElementById("chatboxBody").scrollHeight;
    }, 100);
  });
}
  document.getElementById("chatboxToggle").addEventListener("click", function () {
    document.getElementById("chatbox").style.display = "block";
    document.getElementById("chatboxToggle").style.display = "none";
    setTimeout(() => {
      document.getElementById("chatboxBody").scrollTop = document.getElementById("chatboxBody").scrollHeight;
    }, 100);
  });

  socket.on("connect", async function () {
    socket.emit("joinRoom", { room });

    // Hiển thị thông báo tham gia phòng
    const joinMessageElement = `
        <div class="mb-2 d-flex justify-content-center">
          <div class="d-flex align-items-center">
            <div class="p-2 rounded bg-info text-white">Chúng tôi sẽ hỗ trợ bạn sớm nhất</div>
          </div>
        </div>`;
    $("#chatboxBody").append(joinMessageElement);
    $("#chatboxBody").scrollTop($("#chatboxBody")[0].scrollHeight);
    
    // Lấy tin nhắn lịch sử 
    const messages = await getMessagesForUser(room);
    if (messages.length > 0) {
      const messageTime = new Date(messages[0].timestamp.replace(/(\d{2})\/(\d{2})\/(\d{4}) (\d{2}):(\d{2})/, '$3-$2-$1T$4:$5:00'));
      const day = messageTime.getDate().toString().padStart(2, "0");
      const month = (messageTime.getMonth() + 1).toString().padStart(2, "0");
      const year = messageTime.getFullYear();
      const hours = messageTime.getHours().toString().padStart(2, "0");
      const minutes = messageTime.getMinutes().toString().padStart(2, "0");
      const formattedTime = `${day}/${month}/${year} ${hours}:${minutes}`;

      const timeElement = `
        <div class="text-center text-muted small mb-2">
          ${formattedTime}
        </div>`;
      $("#chatboxBody").append(timeElement);
    }

    messages.forEach((msg) => {
      const messageTime = new Date(msg.timestamp);
      const hours = messageTime.getHours().toString().padStart(2, '0');
      const minutes = messageTime.getMinutes().toString().padStart(2, '0');
      const formattedTime = `${hours}:${minutes}`;
      const isSender = !msg.receiver || msg.receiver === "";
      const messageElement = `
      <div class="mb-2 d-flex ${isSender ? "justify-content-end" : "justify-content-start"}">
        <div class="d-flex align-items-center">
          <div class="p-2 rounded message-box" style="${isSender ? 'background-color: rgb(219, 235, 255);' : 'background-color: #f0f0f0'}; word-break: break-word; max-width: 200px;">
            ${msg.content}
            <div class="text-muted small mt-1">${formattedTime}</div>
          </div>
        </div>
      </div>`;

      $("#chatboxBody").append(messageElement);
    });
    $("#chatboxBody").scrollTop($("#chatboxBody")[0].scrollHeight);
  });

  socket.on("newMessage", function (data) {
    const isSender = !data.receiver || data.receiver === "";
    const messageTime = new Date(data.timestamp);
    const hours = messageTime.getHours().toString().padStart(2, '0');
    const minutes = messageTime.getMinutes().toString().padStart(2, '0');
    const formattedTime = `${hours}:${minutes}`;
    const messageElement = `
    <div class="mb-2 d-flex ${isSender ? "justify-content-end" : "justify-content-start"}">
      <div class="d-flex align-items-center">
        <div class="p-2 rounded message-box ${isSender ? "bg-primary text-white" : ""}" 
          style="background-color: ${isSender ? 'rgb(219, 235, 255)' : '#f0f0f0'}; word-break: break-word; max-width: 200px;">
          ${data.message}
          <div class="text-muted small mt-1">${formattedTime}</div>
        </div>
      </div>
    </div>`;

    $("#chatboxBody").append(messageElement);
    $("#chatboxBody").scrollTop($("#chatboxBody")[0].scrollHeight);
  });

  let lastMessageTime = null;

  async function getLastMessageTime() {
    const timeMessages = await getMessagesForUser(room);
    if (timeMessages.length === 0) {
      return;
    }
    const lastMessage = timeMessages[timeMessages.length - 1];
    lastMessageTime = new Date(lastMessage.timestamp);
  }
  getLastMessageTime();

  // Hàm gửi tin nhắn
function sendMessage() {
  const message = $("#chatInput").val();
  const currentTime = new Date();
  if (message) {
    socket.emit("sendMessage", {
      message: message,
      sender: room,
      receiver: "",
      room: room,
      time: currentTime.toISOString(),
      isFirstMessage: true
    });

    const day = currentTime.getDate().toString().padStart(2, "0");
    const month = (currentTime.getMonth() + 1).toString().padStart(2, "0");
    const year = currentTime.getFullYear();
    const hours = currentTime.getHours().toString().padStart(2, "0");
    const minutes = currentTime.getMinutes().toString().padStart(2, "0");
    const formattedTime = `${day}/${month}/${year} ${hours}:${minutes}`;
    const formattedTimeNotYear = `${hours}:${minutes}`;
    let messageElement = "";

    if (lastMessageTime) {
      const timeDifference = (currentTime - lastMessageTime) / (1000 * 60);
      if (timeDifference > 30) {
        messageElement += `
        <div class="text-center text-muted small mb-2">
          ${formattedTime}
        </div>`;
      }
    }
    messageElement += `
    <div class="mb-2 d-flex justify-content-end">
      <div class="d-flex align-items-center">
        <div class="p-2 rounded message-box text-black"
          style="background-color: rgb(219, 235, 255); word-break: break-word; max-width: 200px;">
          ${message}
          <div class="text-muted small mt-1">${formattedTimeNotYear}</div>
        </div>
      </div>
    </div>`;

    $("#chatboxBody").append(messageElement);
    $("#chatboxBody").scrollTop($("#chatboxBody")[0].scrollHeight);
    $("#chatInput").val("");
  }
}

// Sự kiện click vào nút gửi
$("#sendMessage").click(function () {
  sendMessage();
});

// Sự kiện nhấn Enter trong ô nhập liệu
$("#chatInput").keypress(function (event) {
  if (event.which === 13) { // Kiểm tra nếu phím Enter (keyCode 13) được nhấn
    event.preventDefault(); // Ngừng hành vi mặc định của Enter (ví dụ: tạo dòng mới)
    sendMessage();
  }
});

  async function getMessagesForUser(room) {
  try {
    const response = await fetch(`/api/user/meMessages/${room}`);
    if (!response.ok) {
      throw new Error("Không thể tải tin nhắn");
    }
    const messages = await response.json();
    return messages;
  } catch (error) {
    console.error(error);
    return [];
  } 
}
  // Đóng chatbox khi nhấn nút đóng
  document.getElementById("closeChat").addEventListener("click", function () {
    document.getElementById("chatbox").style.display = "none";
    document.getElementById("chatboxToggle").style.display = "block";
  });
</script>
